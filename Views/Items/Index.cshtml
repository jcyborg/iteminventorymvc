@using ItemInventory2.ViewModel
@model IEnumerable<ItemVM>


@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}


<div aria-live="polite" aria-atomic="true" class="position-fixed bottom-0 end-0 p-3" style="z-index: 11;">
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="toast align-items-center text-bg-success border-0 show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    @TempData["SuccessMessage"]
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="toast align-items-center text-bg-danger border-0 show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    @TempData["ErrorMessage"]
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    }
</div>

<div class="d-flex flex-column align-items-center mb-3">
    <div class="d-flex align-items-center justify-content-center w-100">
        <a href="@Url.Action("Upload", "Items")" class="btn btn-primary me-2">Go to Upload Page</a>
        <a href="@Url.Action("AllItems", "Items")" class="btn btn-secondary">View All Items</a>
    </div>
    <h2 class="text-center mt-3">Items Inventory</h2>
    <p class="text-center mt-1">@ViewBag.TotalRecordsMessage</p>
</div>

<div class="table-responsive">
    <table class="table table-striped table-bordered">
        <thead class="thead-light">
            <tr>
                <th>ItemNo</th>
                <th>Description</th>
                <th>Quantity</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.ItemNo</td>
                    <td>@item.ItemDescription</td>
                    <td>@item.Quantity</td>
                    <td>@item.Price</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Pagination Controls -->
<nav aria-label="Page navigation" class="mt-4">
    <ul class="pagination justify-content-center flex-wrap">
        @if ((int)ViewData["StartPage"] > 1)
        {
            <li class="page-item">
                <a class="page-link" href="@Url.Action("Index", new { page = (int)ViewData["StartPage"] - 1 })">Previous</a>
            </li>
        }

        @for (int i = (int)ViewData["StartPage"]; i <= (int)ViewData["EndPage"]; i++)
        {
            <li class="page-item @(i == (int)ViewData["CurrentPage"] ? "active" : "")">
                <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
            </li>
        }

        @if ((int)ViewData["EndPage"] < (int)ViewData["TotalPages"])
        {
            <li class="page-item">
                <a class="page-link" href="@Url.Action("Index", new { page = (int)ViewData["EndPage"] + 1 })">Next</a>
            </li>
        }
    </ul>
</nav>

<script>
    setTimeout(() => {
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(alert => {
            alert.classList.remove('show');
            alert.classList.add('fade');
        });
    }, 5000);

    document.querySelectorAll('.toast').forEach(toastEl => {
        new bootstrap.Toast(toastEl).show();
    });
</script>
